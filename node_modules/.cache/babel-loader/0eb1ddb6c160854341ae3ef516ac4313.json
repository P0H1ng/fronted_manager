{"remainingRequest":"/home/kali/fronted_manager/node_modules/babel-loader/lib/index.js!/home/kali/fronted_manager/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/kali/fronted_manager/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kali/fronted_manager/src/views/DataPanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/kali/fronted_manager/src/views/DataPanel.vue","mtime":1725806466821},{"path":"/home/kali/fronted_manager/node_modules/cache-loader/dist/cjs.js","mtime":1725805665522},{"path":"/home/kali/fronted_manager/node_modules/babel-loader/lib/index.js","mtime":1725805665488},{"path":"/home/kali/fronted_manager/node_modules/cache-loader/dist/cjs.js","mtime":1725805665522},{"path":"/home/kali/fronted_manager/node_modules/vue-loader/lib/index.js","mtime":1725805708031}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnRvLWZpeGVkIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJEYXRhUGFuZWwiLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB0aW1lcjogbnVsbCwKICAgICAgdGlja1RpbWVyOiBudWxsLAogICAgICBsb2FkaW5nTG9nOiBmYWxzZSwKICAgICAgdGltZTogbnVsbCwKICAgICAgbWludXRlOiAwLAogICAgICBzZWNvbmQ6IDAsCiAgICAgIGxvZ3M6IFtdLAogICAgICByYW5rOiBbXSwKICAgICAgcmFua0hlYWRlcjogW10sCiAgICAgIHBhbmVsOiB7fQogICAgfTsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIHRoaXMubG9vcCgpOwogICAgdGhpcy50aW1lciA9IHNldEludGVydmFsKHRoaXMubG9vcCwgNTAwMCk7CiAgICB0aGlzLnRpY2tUaW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKF90aGlzLnRpbWUgIT09IG51bGwpIHsKICAgICAgICBpZiAoX3RoaXMudGltZVsnUm91bmRSZW1haW5UaW1lJ10tLSA8PSAwKSB7CiAgICAgICAgICBfdGhpcy50aW1lLlJvdW5kUmVtYWluVGltZSA9IF90aGlzLnRpbWUuRHVyYXRpb24gKiA2MDsKICAgICAgICAgIF90aGlzLnRpbWUuTm93Um91bmQrKzsKICAgICAgICB9CgogICAgICAgIF90aGlzLm1pbnV0ZSA9IE1hdGguZmxvb3IoX3RoaXMudGltZS5Sb3VuZFJlbWFpblRpbWUgLyA2MCk7CiAgICAgICAgX3RoaXMuc2Vjb25kID0gX3RoaXMudGltZS5Sb3VuZFJlbWFpblRpbWUgLSBfdGhpcy5taW51dGUgKiA2MDsKICAgICAgfQogICAgfSwgMTAwMCk7CiAgfSwKICBiZWZvcmVEZXN0cm95OiBmdW5jdGlvbiBiZWZvcmVEZXN0cm95KCkgewogICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTsKICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aWNrVGltZXIpOwogIH0sCiAgbWV0aG9kczogewogICAgbG9vcDogZnVuY3Rpb24gbG9vcCgpIHsKICAgICAgdGhpcy5nZXRUaW1lKCk7CiAgICAgIHRoaXMuZ2V0TG9ncygpOwogICAgICB0aGlzLmdldFJhbmsoKTsKICAgICAgdGhpcy5nZXRQYW5lbCgpOwogICAgfSwKICAgIGdldFRpbWU6IGZ1bmN0aW9uIGdldFRpbWUoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdGhpcy51dGlscy5HRVQoJy90aW1lJykudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgX3RoaXMyLnRpbWUgPSByZXM7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICByZXR1cm4gX3RoaXMyLiRtZXNzYWdlKHsKICAgICAgICAgIG1lc3NhZ2U6IGVyciwKICAgICAgICAgIHR5cGU6ICdlcnJvcicKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAogICAgZ2V0TG9nczogZnVuY3Rpb24gZ2V0TG9ncygpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB0aGlzLmxvYWRpbmdMb2cgPSB0cnVlOwogICAgICB0aGlzLnV0aWxzLkdFVCgnL21hbmFnZXIvbG9ncycpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIF90aGlzMy5sb2dzID0gcmVzOwogICAgICAgIF90aGlzMy5sb2FkaW5nTG9nID0gZmFsc2U7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICByZXR1cm4gX3RoaXMzLiRtZXNzYWdlKHsKICAgICAgICAgIG1lc3NhZ2U6IGVyciwKICAgICAgICAgIHR5cGU6ICdlcnJvcicKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAogICAgZ2V0UmFuazogZnVuY3Rpb24gZ2V0UmFuaygpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CgogICAgICB0aGlzLnV0aWxzLkdFVCgnL21hbmFnZXIvcmFuaycpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIF90aGlzNC5yYW5rID0gcmVzLlJhbms7CiAgICAgICAgX3RoaXM0LnJhbmtIZWFkZXIgPSByZXMuVGl0bGU7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICByZXR1cm4gX3RoaXM0LiRtZXNzYWdlKHsKICAgICAgICAgIG1lc3NhZ2U6IGVyciwKICAgICAgICAgIHR5cGU6ICdlcnJvcicKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAogICAgZ2V0UGFuZWw6IGZ1bmN0aW9uIGdldFBhbmVsKCkgewogICAgICB2YXIgX3RoaXM1ID0gdGhpczsKCiAgICAgIHRoaXMudXRpbHMuR0VUKCcvbWFuYWdlci9wYW5lbCcpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIF90aGlzNS5wYW5lbCA9IHJlczsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgIHJldHVybiBfdGhpczUuJG1lc3NhZ2UoewogICAgICAgICAgbWVzc2FnZTogZXJyLAogICAgICAgICAgdHlwZTogJ2Vycm9yJwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0sCiAgICAvLyBleHBvcnRSYW5rKCkgewogICAgLy8gICAgIHRoaXMuZ2V0UmFuaygpCiAgICAvLyBsZXQgY29udGVudCA9ICcnCiAgICAvLwogICAgLy8gbGV0IGJsb2IgPSBuZXcgQmxvYihbSlNPTi5zdHJpbmdpZnkocmVzKV0sIHt0eXBlOiAndGV4dC9wbGFpbid9KQogICAgLy8gbGV0IGRvd25sb2FkRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKQogICAgLy8gbGV0IGhyZWYgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKQogICAgLy8gZG93bmxvYWRFbGVtZW50LmhyZWYgPSBocmVmCiAgICAvLyBkb3dubG9hZEVsZW1lbnQuZG93bmxvYWQgPSBuYW1lCiAgICAvLyBkb3dubG9hZEVsZW1lbnQuY2xpY2soKQogICAgLy8gd2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwoaHJlZikKICAgIC8vIH0KICAgIHN0YXR1c0NsYXNzOiBmdW5jdGlvbiBzdGF0dXNDbGFzcyhhdHRhY2tlZCwgZG93bikgewogICAgICBpZiAoYXR0YWNrZWQgJiYgZG93bikgewogICAgICAgIHJldHVybiAnc3RhdHVzLWRvdWJsZSc7CiAgICAgIH0KCiAgICAgIGlmIChhdHRhY2tlZCkgewogICAgICAgIHJldHVybiAnc3RhdHVzLWF0dGFja2VkJzsKICAgICAgfQoKICAgICAgaWYgKGRvd24pIHsKICAgICAgICByZXR1cm4gJ3N0YXR1cy1kb3duJzsKICAgICAgfQoKICAgICAgcmV0dXJuICdzdGF0dXMtbm9ybWFsJzsKICAgIH0KICB9LAogIGNvbXB1dGVkOiB7CiAgICBwcm9ncmVzc1BlcmNlbnQ6IGZ1bmN0aW9uIHByb2dyZXNzUGVyY2VudCgpIHsKICAgICAgdmFyIHBlcmNlbnQgPSBOdW1iZXIoKChuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDAgLSB0aGlzLnRpbWUuQmVnaW5UaW1lKSAvICh0aGlzLnRpbWUuRW5kVGltZSAtIHRoaXMudGltZS5CZWdpblRpbWUpICogMTAwKS50b0ZpeGVkKDIpKTsKCiAgICAgIGlmIChwZXJjZW50ID4gMTAwKSB7CiAgICAgICAgcmV0dXJuIDEwMDsKICAgICAgfQoKICAgICAgcmV0dXJuIHBlcmNlbnQ7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["DataPanel.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <el-row :gutter=\"12\">\n            <el-col :span=\"14\">\n                <el-card shadow=\"always\" v-loading=\"loadingLog\">\n                    <div slot=\"header\" class=\"clearfix\">\n                        <span v-if=\"time !== null\">\n                            <span v-if=\"time.Status === 'wait'\">\n                                <b>{{$t('panel.not_begin')}}</b>\n                            </span>\n                            <span v-if=\"time.Status === 'on'\"\n                                  v-html=\"$t('panel.til_round_end', { round: time.NowRound, minute: minute, second: second})\">\n                            </span>\n                            <span v-if=\"time.Status === 'pause'\">\n                                <b>{{$t('panel.pause')}}</b>\n                            </span>\n                            <span v-if=\"time.Status === 'end'\">\n                                <b>{{$t('panel.end')}}</b>\n                            </span>\n                        </span>\n\n                        <!-- Debug info -->\n                        <el-popover\n                                style=\"float: right;\"\n                                placement=\"bottom\"\n                                title=\"\"\n                                width=\"300\"\n                                trigger=\"click\">\n                            <p>{{$t('panel.previous_round_zero_title')}}{{ panel.PreviousRoundScore}}\n                                <el-tag size=\"mini\" type=\"success\" v-if=\"panel.PreviousRoundScore <= 0\">\n                                    {{$t('panel.ok')}}\n                                </el-tag>\n                                <el-tag size=\"mini\" type=\"danger\" v-else>{{$t('panel.zero_alert')}}</el-tag>\n                            </p>\n                            <p>{{$t('panel.total_zero_title')}}{{ panel.TotalScore }}\n                                <el-tag size=\"mini\" type=\"success\" v-if=\"panel.TotalScore <= 0\">{{$t('panel.ok')}}\n                                </el-tag>\n                                <el-tag size=\"mini\" type=\"danger\" v-else>{{$t('panel.zero_alert')}}</el-tag>\n                            </p>\n                            <el-button slot=\"reference\" size=\"mini\">{{$t('panel.debug_info')}}</el-button>\n                        </el-popover>\n                        <el-progress v-if=\"time !== null\"\n                                     :text-inside=\"true\"\n                                     :stroke-width=\"17\"\n                                     :percentage=\"progressPercent\"></el-progress>\n                    </div>\n                    <div class=\"system-log\">\n                        <div v-for=\"(log, index) in logs\" v-bind:key=\"index\">\n                            <div class=\"system-log-body\">\n                                <span class=\"system-log-time\">[{{ utils.FormatGoTime(log.CreatedAt) }}]</span>\n                                <span :class=\"'system-log-'+['normal', 'warning', 'important'][log.Level]\">\n                                    [{{['NORMAL', 'WARNING', 'IMPORTANT'][log.Level]}}]\n                                </span>\n                                <span class=\"system-log-message\">{{ log.Content }}</span>\n                            </div>\n                        </div>\n                    </div>\n                </el-card>\n            </el-col>\n            <el-col :span=\"10\">\n                <el-card shadow=\"always\">\n                    <el-table :data=\"rank\" stripe style=\"width: 100%\" height=\"530\" max-height=\"530\" size=\"small\">\n                        <el-table-column type=\"index\" label=\"#\" width=\"50\"></el-table-column>\n                        <el-table-column prop=\"TeamName\" :label=\"$t('panel.team')\"></el-table-column>\n                        <el-table-column prop=\"Score\" :label=\"$t('panel.score')\"\n                                         :formatter=\"(row) => utils.FormatFloat(row.Score)\"></el-table-column>\n                        <el-table-column v-for=\"(header, index) in rankHeader\" v-bind:key=\"index\" :label=\"header\">\n                            <template scope=\"scope\">\n                                <span v-if=\"scope.row.GameBoxStatus[index].IsAttacked\" color=\"green lighten-2\">✔️</span>\n                                 <!-- <span :score=\"utils.FormatFloat(scope.row.GameBoxStatus[index].Score)\"\n                                       :class=\"statusClass(scope.row.GameBoxStatus[index].IsAttacked, scope.row.GameBoxStatus[index].IsDown)\">{{utils.FormatFloat(scope.row.GameBoxStatus[index].Score)}}</span> -->\n                            </template>\n                        </el-table-column>\n                    </el-table>\n                    <br>\n                    <!--                    <el-button size=\"mini\" @click=\"exportRank\">{{$t('panel.export_rank')}}</el-button>-->\n                </el-card>\n                <br>\n                <el-card>\n                    <el-row :gutter=\"20\">\n                        <el-col :span=\"6\" class=\"panel\">\n                            <p class=\"panel-data\">{{ panel.SubmitFlag }}</p>\n                            <span class=\"panel-text\">{{$t('panel.submit_flag_count')}}</span>\n                        </el-col>\n                        <el-col :span=\"6\" class=\"panel\">\n                            <p class=\"panel-data\">{{ panel.CheckDown }}</p>\n                            <span class=\"panel-text\">{{$t('panel.checkdown_count')}}</span>\n                        </el-col>\n                        <el-col :span=\"6\" class=\"panel\">\n                            <p class=\"panel-data\">{{ panel.MemAllocated }}</p>\n                            <span class=\"panel-text\">{{$t('panel.memory_allocated')}}</span>\n                        </el-col>\n                        <el-col :span=\"6\" class=\"panel\" style=\"border-right-width: 0;\">\n                            <p class=\"panel-data\">{{ panel.NumGoroutine }}</p>\n                            <span class=\"panel-text\">{{$t('panel.goroutine_count')}}</span>\n                        </el-col>\n                    </el-row>\n                </el-card>\n            </el-col>\n        </el-row>\n    </div>\n</template>\n\n<script>\n    export default {\n        name: \"DataPanel\",\n\n        data: () => ({\n            timer: null,\n            tickTimer: null,\n            loadingLog: false,\n\n            time: null,\n            minute: 0,\n            second: 0,\n\n            logs: [],\n            rank: [],\n            rankHeader: [],\n            panel: {},\n        }),\n\n        mounted() {\n            this.loop()\n\n            this.timer = setInterval(this.loop, 5000)\n\n            this.tickTimer = setInterval(() => {\n                if (this.time !== null) {\n                    if (this.time['RoundRemainTime']-- <= 0) {\n                        this.time.RoundRemainTime = this.time.Duration * 60\n                        this.time.NowRound++\n                    }\n                    this.minute = Math.floor(this.time.RoundRemainTime / 60)\n                    this.second = this.time.RoundRemainTime - this.minute * 60\n                }\n            }, 1000)\n        },\n\n        beforeDestroy() {\n            clearInterval(this.timer)\n            clearInterval(this.tickTimer)\n        },\n\n        methods: {\n            loop() {\n                this.getTime()\n                this.getLogs()\n                this.getRank()\n                this.getPanel()\n            },\n\n            getTime() {\n                this.utils.GET('/time').then(res => {\n                    this.time = res\n                }).catch(err => this.$message({message: err, type: 'error'}))\n            },\n\n            getLogs() {\n                this.loadingLog = true\n                this.utils.GET('/manager/logs').then(res => {\n                    this.logs = res\n                    this.loadingLog = false\n                }).catch(err => this.$message({message: err, type: 'error'}))\n            },\n\n            getRank() {\n                this.utils.GET('/manager/rank').then(res => {\n                    this.rank = res.Rank\n                    this.rankHeader = res.Title\n                }).catch(err => this.$message({message: err, type: 'error'}))\n            },\n\n            getPanel() {\n                this.utils.GET('/manager/panel').then(res => {\n                    this.panel = res\n                }).catch(err => this.$message({message: err, type: 'error'}))\n            },\n\n            // exportRank() {\n            //     this.getRank()\n            // let content = ''\n            //\n            // let blob = new Blob([JSON.stringify(res)], {type: 'text/plain'})\n            // let downloadElement = document.createElement(\"a\")\n            // let href = window.URL.createObjectURL(blob)\n            // downloadElement.href = href\n            // downloadElement.download = name\n            // downloadElement.click()\n            // window.URL.revokeObjectURL(href)\n            // }\n\n            statusClass(attacked, down) {\n                if (attacked && down) {\n                    return 'status-double'\n                }\n                if (attacked) {\n                    return 'status-attacked'\n                }\n                if (down) {\n                    return 'status-down'\n                }\n                return 'status-normal'\n            }\n        },\n\n        computed: {\n            progressPercent() {\n                let percent = Number((((new Date().getTime() / 1000) - this.time.BeginTime) / (this.time.EndTime - this.time.BeginTime) * 100).toFixed(2))\n                if (percent > 100) {\n                    return 100\n                }\n                return percent\n            }\n        }\n    }\n</script>\n\n<style scoped>\n    .system-log {\n        font-family: Consolas, \"Noto Sans CJK SC Regular\", \"Microsoft YaHei UI Light\",\n        monospace;\n    }\n\n    .system-log-time {\n        color: #aaa;\n    }\n\n    .system-log-normal {\n        color: #aaa;\n    }\n\n    .system-log-warning {\n        color: orange;\n    }\n\n    .system-log-important {\n        color: red;\n    }\n\n    .panel {\n        border: 0 solid #bbbbbb;\n        border-right-width: 1px;\n        text-align: center;\n    }\n\n    .panel-data {\n        text-align: center;\n        font-size: 30px;\n        color: #409EFF;\n    }\n\n    .panel-text {\n        text-align: center;\n        color: #3f3f3f;\n        font-size: 15px;\n    }\n\n    .status-normal {\n        color: green;\n    }\n\n    .status-down {\n        color: orange;\n    }\n\n    .status-attacked {\n        color: red;\n    }\n\n    .status-double {\n        color: red;\n        font-weight: 900;\n    }\n\n    .status-double::before {\n        position: absolute;\n        height: 30%;\n        content: attr(score);\n        overflow: hidden;\n        color: orange;\n        z-index: 999;\n    }\n</style>"],"sourceRoot":"src/views"}]}