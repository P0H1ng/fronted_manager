{"remainingRequest":"/home/kali/fronted_manager/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kali/fronted_manager/src/views/DataPanel.vue?vue&type=style&index=0&id=ef2142a0&scoped=true&lang=css&","dependencies":[{"path":"/home/kali/fronted_manager/src/views/DataPanel.vue","mtime":1718174862663},{"path":"/home/kali/fronted_manager/node_modules/css-loader/dist/cjs.js","mtime":1718174862139},{"path":"/home/kali/fronted_manager/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1718174862613},{"path":"/home/kali/fronted_manager/node_modules/postcss-loader/src/index.js","mtime":1718174862393},{"path":"/home/kali/fronted_manager/node_modules/cache-loader/dist/cjs.js","mtime":1718174862074},{"path":"/home/kali/fronted_manager/node_modules/vue-loader/lib/index.js","mtime":1718174862613}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouc3lzdGVtLWxvZyB7CiAgICBmb250LWZhbWlseTogQ29uc29sYXMsICJOb3RvIFNhbnMgQ0pLIFNDIFJlZ3VsYXIiLCAiTWljcm9zb2Z0IFlhSGVpIFVJIExpZ2h0IiwKICAgIG1vbm9zcGFjZTsKfQoKLnN5c3RlbS1sb2ctdGltZSB7CiAgICBjb2xvcjogI2FhYTsKfQoKLnN5c3RlbS1sb2ctbm9ybWFsIHsKICAgIGNvbG9yOiAjYWFhOwp9Cgouc3lzdGVtLWxvZy13YXJuaW5nIHsKICAgIGNvbG9yOiBvcmFuZ2U7Cn0KCi5zeXN0ZW0tbG9nLWltcG9ydGFudCB7CiAgICBjb2xvcjogcmVkOwp9CgoucGFuZWwgewogICAgYm9yZGVyOiAwIHNvbGlkICNiYmJiYmI7CiAgICBib3JkZXItcmlnaHQtd2lkdGg6IDFweDsKICAgIHRleHQtYWxpZ246IGNlbnRlcjsKfQoKLnBhbmVsLWRhdGEgewogICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgZm9udC1zaXplOiAzMHB4OwogICAgY29sb3I6ICM0MDlFRkY7Cn0KCi5wYW5lbC10ZXh0IHsKICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgIGNvbG9yOiAjM2YzZjNmOwogICAgZm9udC1zaXplOiAxNXB4Owp9Cgouc3RhdHVzLW5vcm1hbCB7CiAgICBjb2xvcjogZ3JlZW47Cn0KCi5zdGF0dXMtZG93biB7CiAgICBjb2xvcjogb3JhbmdlOwp9Cgouc3RhdHVzLWF0dGFja2VkIHsKICAgIGNvbG9yOiByZWQ7Cn0KCi5zdGF0dXMtZG91YmxlIHsKICAgIGNvbG9yOiByZWQ7CiAgICBmb250LXdlaWdodDogOTAwOwp9Cgouc3RhdHVzLWRvdWJsZTo6YmVmb3JlIHsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIGhlaWdodDogMzAlOwogICAgY29udGVudDogYXR0cihzY29yZSk7CiAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgY29sb3I6IG9yYW5nZTsKICAgIHotaW5kZXg6IDk5OTsKfQo="},{"version":3,"sources":["DataPanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0NA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DataPanel.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div>\n        <el-row :gutter=\"12\">\n            <el-col :span=\"14\">\n                <el-card shadow=\"always\" v-loading=\"loadingLog\">\n                    <div slot=\"header\" class=\"clearfix\">\n                        <span v-if=\"time !== null\">\n                            <span v-if=\"time.Status === 'wait'\">\n                                <b>{{$t('panel.not_begin')}}</b>\n                            </span>\n                            <span v-if=\"time.Status === 'on'\"\n                                  v-html=\"$t('panel.til_round_end', { round: time.NowRound, minute: minute, second: second})\">\n                            </span>\n                            <span v-if=\"time.Status === 'pause'\">\n                                <b>{{$t('panel.pause')}}</b>\n                            </span>\n                            <span v-if=\"time.Status === 'end'\">\n                                <b>{{$t('panel.end')}}</b>\n                            </span>\n                        </span>\n\n                        <!-- Debug info -->\n                        <el-popover\n                                style=\"float: right;\"\n                                placement=\"bottom\"\n                                title=\"\"\n                                width=\"300\"\n                                trigger=\"click\">\n                            <p>{{$t('panel.previous_round_zero_title')}}{{ panel.PreviousRoundScore}}\n                                <el-tag size=\"mini\" type=\"success\" v-if=\"panel.PreviousRoundScore <= 0\">\n                                    {{$t('panel.ok')}}\n                                </el-tag>\n                                <el-tag size=\"mini\" type=\"danger\" v-else>{{$t('panel.zero_alert')}}</el-tag>\n                            </p>\n                            <p>{{$t('panel.total_zero_title')}}{{ panel.TotalScore }}\n                                <el-tag size=\"mini\" type=\"success\" v-if=\"panel.TotalScore <= 0\">{{$t('panel.ok')}}\n                                </el-tag>\n                                <el-tag size=\"mini\" type=\"danger\" v-else>{{$t('panel.zero_alert')}}</el-tag>\n                            </p>\n                            <el-button slot=\"reference\" size=\"mini\">{{$t('panel.debug_info')}}</el-button>\n                        </el-popover>\n                        <el-progress v-if=\"time !== null\"\n                                     :text-inside=\"true\"\n                                     :stroke-width=\"17\"\n                                     :percentage=\"progressPercent\"></el-progress>\n                    </div>\n                    <div class=\"system-log\">\n                        <div v-for=\"(log, index) in logs\" v-bind:key=\"index\">\n                            <div class=\"system-log-body\">\n                                <span class=\"system-log-time\">[{{ utils.FormatGoTime(log.CreatedAt) }}]</span>\n                                <span :class=\"'system-log-'+['normal', 'warning', 'important'][log.Level]\">\n                                    [{{['NORMAL', 'WARNING', 'IMPORTANT'][log.Level]}}]\n                                </span>\n                                <span class=\"system-log-message\">{{ log.Content }}</span>\n                            </div>\n                        </div>\n                    </div>\n                </el-card>\n            </el-col>\n            <el-col :span=\"10\">\n                <el-card shadow=\"always\">\n                    <el-table :data=\"rank\" stripe style=\"width: 100%\" height=\"530\" max-height=\"530\" size=\"small\">\n                        <el-table-column type=\"index\" label=\"#\" width=\"50\"></el-table-column>\n                        <el-table-column prop=\"TeamName\" :label=\"$t('panel.team')\"></el-table-column>\n                        <el-table-column prop=\"Score\" :label=\"$t('panel.score')\"\n                                         :formatter=\"(row) => utils.FormatFloat(row.Score)\"></el-table-column>\n                        <el-table-column v-for=\"(header, index) in rankHeader\" v-bind:key=\"index\" :label=\"header\">\n                            <template scope=\"scope\">\n                                 <span :score=\"utils.FormatFloat(scope.row.GameBoxStatus[index].Score)\"\n                                       :class=\"statusClass(scope.row.GameBoxStatus[index].IsAttacked, scope.row.GameBoxStatus[index].IsDown)\">{{utils.FormatFloat(scope.row.GameBoxStatus[index].Score)}}</span>\n                            </template>\n                        </el-table-column>\n                    </el-table>\n                    <br>\n                    <!--                    <el-button size=\"mini\" @click=\"exportRank\">{{$t('panel.export_rank')}}</el-button>-->\n                </el-card>\n                <br>\n                <el-card>\n                    <el-row :gutter=\"20\">\n                        <el-col :span=\"6\" class=\"panel\">\n                            <p class=\"panel-data\">{{ panel.SubmitFlag }}</p>\n                            <span class=\"panel-text\">{{$t('panel.submit_flag_count')}}</span>\n                        </el-col>\n                        <el-col :span=\"6\" class=\"panel\">\n                            <p class=\"panel-data\">{{ panel.CheckDown }}</p>\n                            <span class=\"panel-text\">{{$t('panel.checkdown_count')}}</span>\n                        </el-col>\n                        <el-col :span=\"6\" class=\"panel\">\n                            <p class=\"panel-data\">{{ panel.MemAllocated }}</p>\n                            <span class=\"panel-text\">{{$t('panel.memory_allocated')}}</span>\n                        </el-col>\n                        <el-col :span=\"6\" class=\"panel\" style=\"border-right-width: 0;\">\n                            <p class=\"panel-data\">{{ panel.NumGoroutine }}</p>\n                            <span class=\"panel-text\">{{$t('panel.goroutine_count')}}</span>\n                        </el-col>\n                    </el-row>\n                </el-card>\n            </el-col>\n        </el-row>\n    </div>\n</template>\n\n<script>\n    export default {\n        name: \"DataPanel\",\n\n        data: () => ({\n            timer: null,\n            tickTimer: null,\n            loadingLog: false,\n\n            time: null,\n            minute: 0,\n            second: 0,\n\n            logs: [],\n            rank: [],\n            rankHeader: [],\n            panel: {},\n        }),\n\n        mounted() {\n            this.loop()\n\n            this.timer = setInterval(this.loop, 5000)\n\n            this.tickTimer = setInterval(() => {\n                if (this.time !== null) {\n                    if (this.time['RoundRemainTime']-- <= 0) {\n                        this.time.RoundRemainTime = this.time.Duration * 60\n                        this.time.NowRound++\n                    }\n                    this.minute = Math.floor(this.time.RoundRemainTime / 60)\n                    this.second = this.time.RoundRemainTime - this.minute * 60\n                }\n            }, 1000)\n        },\n\n        beforeDestroy() {\n            clearInterval(this.timer)\n            clearInterval(this.tickTimer)\n        },\n\n        methods: {\n            loop() {\n                this.getTime()\n                this.getLogs()\n                this.getRank()\n                this.getPanel()\n            },\n\n            getTime() {\n                this.utils.GET('/time').then(res => {\n                    this.time = res\n                }).catch(err => this.$message({message: err, type: 'error'}))\n            },\n\n            getLogs() {\n                this.loadingLog = true\n                this.utils.GET('/manager/logs').then(res => {\n                    this.logs = res\n                    this.loadingLog = false\n                }).catch(err => this.$message({message: err, type: 'error'}))\n            },\n\n            getRank() {\n                this.utils.GET('/manager/rank').then(res => {\n                    this.rank = res.Rank\n                    this.rankHeader = res.Title\n                }).catch(err => this.$message({message: err, type: 'error'}))\n            },\n\n            getPanel() {\n                this.utils.GET('/manager/panel').then(res => {\n                    this.panel = res\n                }).catch(err => this.$message({message: err, type: 'error'}))\n            },\n\n            // exportRank() {\n            //     this.getRank()\n            // let content = ''\n            //\n            // let blob = new Blob([JSON.stringify(res)], {type: 'text/plain'})\n            // let downloadElement = document.createElement(\"a\")\n            // let href = window.URL.createObjectURL(blob)\n            // downloadElement.href = href\n            // downloadElement.download = name\n            // downloadElement.click()\n            // window.URL.revokeObjectURL(href)\n            // }\n\n            statusClass(attacked, down) {\n                if (attacked && down) {\n                    return 'status-double'\n                }\n                if (attacked) {\n                    return 'status-attacked'\n                }\n                if (down) {\n                    return 'status-down'\n                }\n                return 'status-normal'\n            }\n        },\n\n        computed: {\n            progressPercent() {\n                let percent = Number((((new Date().getTime() / 1000) - this.time.BeginTime) / (this.time.EndTime - this.time.BeginTime) * 100).toFixed(2))\n                if (percent > 100) {\n                    return 100\n                }\n                return percent\n            }\n        }\n    }\n</script>\n\n<style scoped>\n    .system-log {\n        font-family: Consolas, \"Noto Sans CJK SC Regular\", \"Microsoft YaHei UI Light\",\n        monospace;\n    }\n\n    .system-log-time {\n        color: #aaa;\n    }\n\n    .system-log-normal {\n        color: #aaa;\n    }\n\n    .system-log-warning {\n        color: orange;\n    }\n\n    .system-log-important {\n        color: red;\n    }\n\n    .panel {\n        border: 0 solid #bbbbbb;\n        border-right-width: 1px;\n        text-align: center;\n    }\n\n    .panel-data {\n        text-align: center;\n        font-size: 30px;\n        color: #409EFF;\n    }\n\n    .panel-text {\n        text-align: center;\n        color: #3f3f3f;\n        font-size: 15px;\n    }\n\n    .status-normal {\n        color: green;\n    }\n\n    .status-down {\n        color: orange;\n    }\n\n    .status-attacked {\n        color: red;\n    }\n\n    .status-double {\n        color: red;\n        font-weight: 900;\n    }\n\n    .status-double::before {\n        position: absolute;\n        height: 30%;\n        content: attr(score);\n        overflow: hidden;\n        color: orange;\n        z-index: 999;\n    }\n</style>"]}]}