{"remainingRequest":"/home/kali/fronted_manager/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/kali/fronted_manager/src/views/GameBox.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/kali/fronted_manager/src/views/GameBox.vue","mtime":1718175608455},{"path":"/home/kali/fronted_manager/node_modules/babel-loader/lib/index.js","mtime":1718174862030},{"path":"/home/kali/fronted_manager/node_modules/cache-loader/dist/cjs.js","mtime":1718174862074},{"path":"/home/kali/fronted_manager/node_modules/vue-loader/lib/index.js","mtime":1718174862613}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}